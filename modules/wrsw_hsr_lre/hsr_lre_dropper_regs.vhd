---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Switch HSR LRE Dropper registers
---------------------------------------------------------------------------------------
-- File           : hsr_lre_dropper_regs.vhd
-- Author         : auto-generated by wbgen2 from hsr_dropper_regs.wb
-- Created        : Tue Oct 11 09:44:37 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE hsr_dropper_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

use work.dropper_wbgen2_pkg.all;


entity hsr_lre_dropper_regs is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(6 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
-- Ports for RAM: Dropper general RAM
    dropper_ram_addr_i                       : in     std_logic_vector(5 downto 0);
-- Read data output
    dropper_ram_data_o                       : out    std_logic_vector(31 downto 0);
-- Read strobe input (active high)
    dropper_ram_rd_i                         : in     std_logic;
-- Write data input
    dropper_ram_data_i                       : in     std_logic_vector(31 downto 0);
-- Write strobe (active high)
    dropper_ram_wr_i                         : in     std_logic;
    regs_i                                   : in     t_dropper_in_registers;
    regs_o                                   : out    t_dropper_out_registers
  );
end hsr_lre_dropper_regs;

architecture syn of hsr_lre_dropper_regs is

signal dropper_ram_rddata_int                   : std_logic_vector(31 downto 0);
signal dropper_ram_rd_int                       : std_logic      ;
signal dropper_ram_wr_int                       : std_logic      ;
signal dropper_del_index_int                    : std_logic_vector(4 downto 0);
signal dropper_del_cmd_dly0                     : std_logic      ;
signal dropper_del_cmd_int                      : std_logic      ;
signal dropper_del_rst_dly0                     : std_logic      ;
signal dropper_del_rst_int                      : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(6 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      dropper_del_index_int <= "00000";
      dropper_del_cmd_int <= '0';
      dropper_del_rst_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          dropper_del_cmd_int <= '0';
          dropper_del_rst_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(6) is
          when '0' => 
            case rwaddr_reg(0) is
            when '0' => 
              if (wb_we_i = '1') then
              end if;
              rddata_reg(31 downto 0) <= regs_i.avail_i;
              ack_sreg(0) <= '1';
              ack_in_progress <= '1';
            when '1' => 
              if (wb_we_i = '1') then
                dropper_del_index_int <= wrdata_reg(12 downto 8);
                dropper_del_cmd_int <= wrdata_reg(16);
                dropper_del_rst_int <= wrdata_reg(24);
              end if;
              rddata_reg(12 downto 8) <= dropper_del_index_int;
              rddata_reg(16) <= '0';
              rddata_reg(24) <= '0';
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
              ack_sreg(2) <= '1';
              ack_in_progress <= '1';
            when others =>
-- prevent the slave from hanging the bus on invalid address
              ack_in_progress <= '1';
              ack_sreg(0) <= '1';
            end case;
          when '1' => 
            if (rd_int = '1') then
              ack_sreg(0) <= '1';
            else
              ack_sreg(0) <= '1';
            end if;
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Data output multiplexer process
  process (rddata_reg, rwaddr_reg, dropper_ram_rddata_int, wb_adr_i  )
  begin
    case rwaddr_reg(6) is
    when '1' => 
      wb_dat_o(31 downto 0) <= dropper_ram_rddata_int;
    when others =>
      wb_dat_o <= rddata_reg;
    end case;
  end process;
  
  
-- Read & write lines decoder for RAMs
  process (wb_adr_i, rd_int, wr_int  )
  begin
    if (wb_adr_i(6) = '1') then
      dropper_ram_rd_int <= rd_int;
      dropper_ram_wr_int <= wr_int;
    else
      dropper_ram_wr_int <= '0';
      dropper_ram_rd_int <= '0';
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: Dropper general RAM
-- RAM block instantiation for memory: Dropper general RAM
  dropper_ram_raminst : wbgen2_dpssram
    generic map (
      g_data_width         => 32,
      g_size               => 64,
      g_addr_width         => 6,
      g_dual_clock         => false,
      g_use_bwsel          => false
    )
    port map (
      clk_a_i              => clk_sys_i,
      clk_b_i              => clk_sys_i,
      addr_b_i             => dropper_ram_addr_i,
      addr_a_i             => rwaddr_reg(5 downto 0),
      data_b_o             => dropper_ram_data_o,
      rd_b_i               => dropper_ram_rd_i,
      data_b_i             => dropper_ram_data_i,
      wr_b_i               => dropper_ram_wr_i,
      bwsel_b_i            => allones(3 downto 0),
      data_a_o             => dropper_ram_rddata_int(31 downto 0),
      rd_a_i               => dropper_ram_rd_int,
      data_a_i             => wrdata_reg(31 downto 0),
      wr_a_i               => dropper_ram_wr_int,
      bwsel_a_i            => allones(3 downto 0)
    );
  
-- Available positions
-- Node removal index
  regs_o.del_index_o <= dropper_del_index_int;
-- Node removal command
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      dropper_del_cmd_dly0 <= '0';
      regs_o.del_cmd_o <= '0';
    elsif rising_edge(clk_sys_i) then
      dropper_del_cmd_dly0 <= dropper_del_cmd_int;
      regs_o.del_cmd_o <= dropper_del_cmd_int and (not dropper_del_cmd_dly0);
    end if;
  end process;
  
  
-- Node list reset
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      dropper_del_rst_dly0 <= '0';
      regs_o.del_rst_o <= '0';
    elsif rising_edge(clk_sys_i) then
      dropper_del_rst_dly0 <= dropper_del_rst_int;
      regs_o.del_rst_o <= dropper_del_rst_int and (not dropper_del_rst_dly0);
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
