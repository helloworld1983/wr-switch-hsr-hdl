---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Switch HSR LRE registers
---------------------------------------------------------------------------------------
-- File           : hsr_lre_regs_pkg.vhd
-- Author         : auto-generated by wbgen2 from hsr_lre_regs.wb
-- Created        : Tue Oct 11 09:44:37 2016
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE hsr_lre_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package lre_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_lre_in_registers is record
    lcr_link_ok_i                            : std_logic_vector(1 downto 0);
    fwd_ep0_i                                : std_logic_vector(31 downto 0);
    fwd_ep1_i                                : std_logic_vector(31 downto 0);
    disc_ep0_i                               : std_logic_vector(31 downto 0);
    disc_ep1_i                               : std_logic_vector(31 downto 0);
    acc_ep0_i                                : std_logic_vector(31 downto 0);
    acc_ep1_i                                : std_logic_vector(31 downto 0);
    bound_ep0_i                              : std_logic_vector(31 downto 0);
    bound_ep1_i                              : std_logic_vector(31 downto 0);
    dup_ep0_i                                : std_logic_vector(31 downto 0);
    dup_ep1_i                                : std_logic_vector(31 downto 0);
    seq_ep0_i                                : std_logic_vector(31 downto 0);
    seq_ep1_i                                : std_logic_vector(31 downto 0);
    end record;
  
  constant c_lre_in_registers_init_value: t_lre_in_registers := (
    lcr_link_ok_i => (others => '0'),
    fwd_ep0_i => (others => '0'),
    fwd_ep1_i => (others => '0'),
    disc_ep0_i => (others => '0'),
    disc_ep1_i => (others => '0'),
    acc_ep0_i => (others => '0'),
    acc_ep1_i => (others => '0'),
    bound_ep0_i => (others => '0'),
    bound_ep1_i => (others => '0'),
    dup_ep0_i => (others => '0'),
    dup_ep1_i => (others => '0'),
    seq_ep0_i => (others => '0'),
    seq_ep1_i => (others => '0')
    );
    
    -- Output registers (WB slave -> user design)
    
    type t_lre_out_registers is record
      lcr_rst_n_o                              : std_logic;
      lcr_en_o                                 : std_logic;
      lcr_mode_o                               : std_logic_vector(3 downto 0);
      lcr_hsr_path_o                           : std_logic_vector(3 downto 0);
      lcr_clr_cnt_o                            : std_logic;
      mach_o                                   : std_logic_vector(15 downto 0);
      macl_o                                   : std_logic_vector(31 downto 0);
      end record;
    
    constant c_lre_out_registers_init_value: t_lre_out_registers := (
      lcr_rst_n_o => '0',
      lcr_en_o => '0',
      lcr_mode_o => (others => '0'),
      lcr_hsr_path_o => (others => '0'),
      lcr_clr_cnt_o => '0',
      mach_o => (others => '0'),
      macl_o => (others => '0')
      );
    function "or" (left, right: t_lre_in_registers) return t_lre_in_registers;
    function f_x_to_zero (x:std_logic) return std_logic;
    function f_x_to_zero (x:std_logic_vector) return std_logic_vector;
end package;

package body lre_wbgen2_pkg is
function f_x_to_zero (x:std_logic) return std_logic is
begin
if x = '1' then
return '1';
else
return '0';
end if;
end function;
function f_x_to_zero (x:std_logic_vector) return std_logic_vector is
variable tmp: std_logic_vector(x'length-1 downto 0);
begin
for i in 0 to x'length-1 loop
if(x(i) = 'X' or x(i) = 'U') then
tmp(i):= '0';
else
tmp(i):=x(i);
end if; 
end loop; 
return tmp;
end function;
function "or" (left, right: t_lre_in_registers) return t_lre_in_registers is
variable tmp: t_lre_in_registers;
begin
tmp.lcr_link_ok_i := f_x_to_zero(left.lcr_link_ok_i) or f_x_to_zero(right.lcr_link_ok_i);
tmp.fwd_ep0_i := f_x_to_zero(left.fwd_ep0_i) or f_x_to_zero(right.fwd_ep0_i);
tmp.fwd_ep1_i := f_x_to_zero(left.fwd_ep1_i) or f_x_to_zero(right.fwd_ep1_i);
tmp.disc_ep0_i := f_x_to_zero(left.disc_ep0_i) or f_x_to_zero(right.disc_ep0_i);
tmp.disc_ep1_i := f_x_to_zero(left.disc_ep1_i) or f_x_to_zero(right.disc_ep1_i);
tmp.acc_ep0_i := f_x_to_zero(left.acc_ep0_i) or f_x_to_zero(right.acc_ep0_i);
tmp.acc_ep1_i := f_x_to_zero(left.acc_ep1_i) or f_x_to_zero(right.acc_ep1_i);
tmp.bound_ep0_i := f_x_to_zero(left.bound_ep0_i) or f_x_to_zero(right.bound_ep0_i);
tmp.bound_ep1_i := f_x_to_zero(left.bound_ep1_i) or f_x_to_zero(right.bound_ep1_i);
tmp.dup_ep0_i := f_x_to_zero(left.dup_ep0_i) or f_x_to_zero(right.dup_ep0_i);
tmp.dup_ep1_i := f_x_to_zero(left.dup_ep1_i) or f_x_to_zero(right.dup_ep1_i);
tmp.seq_ep0_i := f_x_to_zero(left.seq_ep0_i) or f_x_to_zero(right.seq_ep0_i);
tmp.seq_ep1_i := f_x_to_zero(left.seq_ep1_i) or f_x_to_zero(right.seq_ep1_i);
return tmp;
end function;
end package body;
